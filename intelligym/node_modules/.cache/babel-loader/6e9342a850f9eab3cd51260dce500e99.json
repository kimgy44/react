{"ast":null,"code":"var _jsxFileName = \"C:\\\\git_20220415\\\\dev-web\\\\src\\\\main\\\\intelligym\\\\src\\\\workoutApp.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Workouts from \"./components/Workouts\";\nimport \"./app.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WorkoutApp() {\n  _s();\n\n  // Array 타입-> XXX[0].id, XXX[1].name, XXX[2].count\n  const [items, setItems] = useState([{\n    id: 1,\n    name: \"벤치프레스\",\n    count: 0\n  }, {\n    id: 2,\n    name: \"랫풀다운\",\n    count: 0\n  }, {\n    id: 3,\n    name: \"스쿼트\",\n    count: 0\n  }]);\n\n  const handleIncrement = workout => {\n    console.log(`workout: ${workout.name}, ${workout.count}`); //사용자가 선택한 로우의 인덱스 값을 알아낸다\n\n    const index = items.indexOf(workout); // 0 , 1, 2 -1은 없다\n    //이벤트가 발동된 인덱스를 값으로 count변수에 접근한 뒤 1씩 증가\n\n    items[index].count += 1; //위에서 count가 1증가된 정보로 업데이트가 되어야 하므로 spread구문을 이용해서 복사\n    //상태를 관리하는 useState훅을 사용하면 한개씩도 가능하고  객체도 가능, 또한 배열도 가능함\n    //useState훅을 사용하면 효율적인 처리가 가능하다. 상태가 변한 경우에만 새로 처리를 함- 훨씬 효과적인 화면처리가능\n    //메모리 사용도 줄어든다\n\n    setItems([...items]);\n  }; //바닐라스크립트에서 함수는 객체이다\n\n\n  const handleDecrement = workout => {\n    const index = items.indexOf(workout);\n    const count = items[index].count - 1;\n    items[index].count = count < 0 ? 0 : count;\n    setItems([...items]);\n  }; // 하위 노드인 Workout.jsx에서 props로 받은 정보를\n  // 다시 넘겨 받는다\n\n\n  const handleDelete = workout => {\n    // 전체집합에서 가져온 아이디와 파라미터로 넘어온 아이디가\n    // 서로 다르니? \n    const workouts = items.filter(item => item.id !== workout.id); // 그럼 왜 useState에 저장을 하는걸까?\n    // 이상 돔트리와 비교해서 데이터에 변화가 있는 돔만 새로 처리함\n\n    setItems([...workouts]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Workouts //\n  , {\n    workouts: items //태그의 속성으로 값을 넘길 수 있다 - props활용\n    ,\n    onIncrement: handleIncrement,\n    onDecrement: handleDecrement,\n    onDelete: handleDelete\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutApp, \"SL/mA+i7hxpv08fVTkkWTR6AmTU=\");\n\n_c = WorkoutApp;\nexport default WorkoutApp; // rsf : function으로 자동완성\n// 결론적으로 부모태그에서 하위태그로는 항상 언제든지 props를 통해서 값을 전달할 수  있다.\n// 다만 매번 파일마다 props를 전달해야 하므로 피로도가 높다 - 그래서 리덕스가 출현\n// 이벤트 처리도 위임하거나 전달이 가능하다\n// 자바스크립트에서는 함수도 객체 이니까.....\n// ajax가 없어도 리액트에서는 그런 효과를 처리가능함\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutApp\");","map":{"version":3,"names":["React","useState","Workouts","WorkoutApp","items","setItems","id","name","count","handleIncrement","workout","console","log","index","indexOf","handleDecrement","handleDelete","workouts","filter","item"],"sources":["C:/git_20220415/dev-web/src/main/intelligym/src/workoutApp.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Workouts from \"./components/Workouts\";\r\nimport \"./app.css\";\r\n\r\nfunction WorkoutApp() {\r\n  // Array 타입-> XXX[0].id, XXX[1].name, XXX[2].count\r\n  const [items, setItems] = useState([\r\n    { id: 1, name: \"벤치프레스\", count: 0 },\r\n    { id: 2, name: \"랫풀다운\", count: 0 },\r\n    { id: 3, name: \"스쿼트\", count: 0 },\r\n  ]);\r\n\r\n  const handleIncrement = (workout) => {\r\n    console.log(`workout: ${workout.name}, ${workout.count}`);\r\n    //사용자가 선택한 로우의 인덱스 값을 알아낸다\r\n    const index = items.indexOf(workout); // 0 , 1, 2 -1은 없다\r\n    //이벤트가 발동된 인덱스를 값으로 count변수에 접근한 뒤 1씩 증가\r\n    items[index].count += 1;\r\n    //위에서 count가 1증가된 정보로 업데이트가 되어야 하므로 spread구문을 이용해서 복사\r\n    //상태를 관리하는 useState훅을 사용하면 한개씩도 가능하고  객체도 가능, 또한 배열도 가능함\r\n    //useState훅을 사용하면 효율적인 처리가 가능하다. 상태가 변한 경우에만 새로 처리를 함- 훨씬 효과적인 화면처리가능\r\n    //메모리 사용도 줄어든다\r\n    setItems([...items]);\r\n  };\r\n  //바닐라스크립트에서 함수는 객체이다\r\n  const handleDecrement = (workout) => {\r\n    const index = items.indexOf(workout);\r\n    const count = items[index].count - 1;\r\n    items[index].count = count < 0 ? 0 : count;\r\n    setItems([...items]);\r\n  };\r\n  // 하위 노드인 Workout.jsx에서 props로 받은 정보를\r\n  // 다시 넘겨 받는다\r\n  const handleDelete = (workout) => {\r\n    // 전체집합에서 가져온 아이디와 파라미터로 넘어온 아이디가\r\n    // 서로 다르니? \r\n    const workouts = items.filter(item => item.id !== workout.id);\r\n    // 그럼 왜 useState에 저장을 하는걸까?\r\n    // 이상 돔트리와 비교해서 데이터에 변화가 있는 돔만 새로 처리함\r\n    setItems([...workouts]);\r\n  };\r\n\r\n  return (\r\n    <Workouts //\r\n      workouts={items} //태그의 속성으로 값을 넘길 수 있다 - props활용\r\n      onIncrement={handleIncrement}\r\n      onDecrement={handleDecrement}\r\n      onDelete={handleDelete}\r\n    />\r\n  );\r\n}\r\n\r\nexport default WorkoutApp;\r\n\r\n// rsf : function으로 자동완성\r\n// 결론적으로 부모태그에서 하위태그로는 항상 언제든지 props를 통해서 값을 전달할 수  있다.\r\n// 다만 매번 파일마다 props를 전달해야 하므로 피로도가 높다 - 그래서 리덕스가 출현\r\n// 이벤트 처리도 위임하거나 전달이 가능하다\r\n// 자바스크립트에서는 함수도 객체 이니까.....\r\n// ajax가 없어도 리액트에서는 그런 효과를 처리가능함\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAO,WAAP;;;AAEA,SAASC,UAAT,GAAsB;EAAA;;EACpB;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CACjC;IAAEK,EAAE,EAAE,CAAN;IAASC,IAAI,EAAE,OAAf;IAAwBC,KAAK,EAAE;EAA/B,CADiC,EAEjC;IAAEF,EAAE,EAAE,CAAN;IAASC,IAAI,EAAE,MAAf;IAAuBC,KAAK,EAAE;EAA9B,CAFiC,EAGjC;IAAEF,EAAE,EAAE,CAAN;IAASC,IAAI,EAAE,KAAf;IAAsBC,KAAK,EAAE;EAA7B,CAHiC,CAAD,CAAlC;;EAMA,MAAMC,eAAe,GAAIC,OAAD,IAAa;IACnCC,OAAO,CAACC,GAAR,CAAa,YAAWF,OAAO,CAACH,IAAK,KAAIG,OAAO,CAACF,KAAM,EAAvD,EADmC,CAEnC;;IACA,MAAMK,KAAK,GAAGT,KAAK,CAACU,OAAN,CAAcJ,OAAd,CAAd,CAHmC,CAGG;IACtC;;IACAN,KAAK,CAACS,KAAD,CAAL,CAAaL,KAAb,IAAsB,CAAtB,CALmC,CAMnC;IACA;IACA;IACA;;IACAH,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;EACD,CAXD,CARoB,CAoBpB;;;EACA,MAAMW,eAAe,GAAIL,OAAD,IAAa;IACnC,MAAMG,KAAK,GAAGT,KAAK,CAACU,OAAN,CAAcJ,OAAd,CAAd;IACA,MAAMF,KAAK,GAAGJ,KAAK,CAACS,KAAD,CAAL,CAAaL,KAAb,GAAqB,CAAnC;IACAJ,KAAK,CAACS,KAAD,CAAL,CAAaL,KAAb,GAAqBA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAArC;IACAH,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;EACD,CALD,CArBoB,CA2BpB;EACA;;;EACA,MAAMY,YAAY,GAAIN,OAAD,IAAa;IAChC;IACA;IACA,MAAMO,QAAQ,GAAGb,KAAK,CAACc,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACb,EAAL,KAAYI,OAAO,CAACJ,EAAzC,CAAjB,CAHgC,CAIhC;IACA;;IACAD,QAAQ,CAAC,CAAC,GAAGY,QAAJ,CAAD,CAAR;EACD,CAPD;;EASA,oBACE,QAAC,QAAD,CAAU;EAAV;IACE,QAAQ,EAAEb,KADZ,CACmB;IADnB;IAEE,WAAW,EAAEK,eAFf;IAGE,WAAW,EAAEM,eAHf;IAIE,QAAQ,EAAEC;EAJZ;IAAA;IAAA;IAAA;EAAA,QADF;AAQD;;GA9CQb,U;;KAAAA,U;AAgDT,eAAeA,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}